name: Automation Report State
description: 'Send Automation Report State'
inputs:
  callback-url:
    description: 'The callback URL to send the report to'
    required: true
  status:
    description: 'The status of the automation (e.g., success, failure)'
    required: false
    default: ${{ job.status }}
  data:
    description: 'The report data to send'
    required: false
runs:
  using: "composite"
  steps:
    - name: Get JWT Token
      id: get-jwt-token
      shell: bash
      run: |
        # Get JWT token for authentication
        TOKEN_REQ=$(curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
        TOKEN=$(echo "$TOKEN_REQ" | jq -r '.value')
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT

    - name: Prepare automation report payload
      shell: bash
      id: prepare-automation-report-payload
      run: |
        REPORT_FILE=$(mktemp /tmp/report-XXXXXX.json)
        payload_base=$(jq -n \
          --arg status "$STATUS" \
          --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
          --arg repository "$GITHUB_REPOSITORY" \
          --arg ref "$GITHUB_REF" \
          --arg idToken "$TOKEN" \
          '{status: $status, timestamp: $timestamp, repository: $repository, ref: $ref, idToken: $idToken}')

        if [ -n "$DATA" ]; then
          payload_data=$(jq -n --arg data "$DATA" '$data | fromjson? // $data')
          jq -n --argjson base "$payload_base" --argjson data "$payload_data" '$base + {data: $data}' > "$REPORT_FILE"
        else
          echo "$payload_base" > "$REPORT_FILE"
        fi
        echo "file=$REPORT_FILE" >> $GITHUB_OUTPUT
      env:
        STATUS: ${{ inputs.status }}
        DATA: ${{ inputs.data }}
        TOKEN: ${{ steps.get-jwt-token.outputs.token }}
        
    - name: Print report file
      if: ${{ runner.debug }}
      shell: bash
      run: |
        # Print report file for debug purposes
        cat "$REPORT_FILE"
      env:
        REPORT_FILE: ${{ steps.prepare-automation-report-payload.outputs.file }}

    - name: Report state of workflow
      shell: bash
      run: |
        # Post report
        MAX_RETRIES=5
        RETRY_DELAY=5

        # Check if report file exists
        if [ ! -f "$REPORT_FILE" ]; then
          echo "::error::Report file does not exist."
          exit 1
        fi

        for i in $(seq 1 $MAX_RETRIES); do
          HTTP_CODE=$(curl -sS -o /dev/null -w "%{http_code}" -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            --data-binary "@$REPORT_FILE")
          if [ "$HTTP_CODE" -eq 200 ]; then
            break
          elif [ "$HTTP_CODE" -eq 409 ]; then
            echo "Conflict (409) received, skipping retry."
            break
          else
            echo "POST attempt $i failed with HTTP $HTTP_CODE. Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          fi
        done
        if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "409" ]; then
          echo "POST failed after $MAX_RETRIES attempts. Last HTTP code: $HTTP_CODE."
          exit 1
        fi
      env:
        CALLBACK_URL: ${{ inputs.callback-url }}
        REPORT_FILE: ${{ steps.prepare-automation-report-payload.outputs.file }}
        TOKEN: ${{ steps.get-jwt-token.outputs.token }}